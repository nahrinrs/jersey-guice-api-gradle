apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.5
version = '1.0'

repositories {
    mavenCentral()
}
allprojects {
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: 'java'
	version = "0.1"

	ext {
		guavaVersion = '14.0.1'
		guiceVersion = '3.0'
		jerseyVersion = '1.18.1'
		log4jVersion = '1.2.17'
		jacksonVersion = '2.7.4'
		jettyVersion = '9.2.2.v20140723'
		jspVersion = '3.1.0'
		jedisVersion = '2.4.2'
		memcachedVersion = '1.0.61.0'
		mongoVersion = '2.13.0'
		awsVersion = '1.8.0'
		commonsMathVersion = '3.3'
		commonsCliVersion = '1.2'
		commonsValidator = '1.4.0'
		commonsIOVersion = '1.3.2'
		commonsLangVersion = '3.0'
		commonsCollectionsVersion = '3.2.1'
		gsonVersion = '2.3'
		libPhoneNumberVersion = '6.2'
		poiVersion = '3.10-FINAL'
		quartzVersion = '2.2.1'
		jodaTimeVersion = '2.4'
		testNgVersion = "6.8.21"
		mockitoVersion = "1.10.19"
		codehausVersion = "1.9.13"
		scope = (project.hasProperty('scope') ? project.scope : "local")
		env = System.getenv()
		buildNumber = env.BUILD_NUMBER ? env.BUILD_NUMBER.toInteger() : -1
		buildTag = env.BUILD_TAG ? env.BUILD_TAG : ""
		buildId = env.BUILD_ID ? env.BUILD_ID : ""
	}
}
dependencies {
    compile "log4j:log4j:$log4jVersion"
	compile "com.google.code.gson:gson:$gsonVersion"
	compile "com.google.guava:guava:$guavaVersion"
	compile "com.google.inject:guice:$guiceVersion"
	compile "com.sun.jersey:jersey-core:$jerseyVersion"
	compile "com.sun.jersey:jersey-server:$jerseyVersion"
	compile "com.sun.jersey:jersey-servlet:$jerseyVersion"
	compile "com.sun.jersey.contribs:jersey-guice:$jerseyVersion"
	compile "com.sun.jersey.contribs:jersey-multipart:$jerseyVersion"
	compile "org.eclipse.jetty:jetty-server:$jettyVersion"
	compile "org.codehaus.jackson:jackson-core-asl:$codehausVersion"
	compile "org.codehaus.jackson:jackson-mapper-asl:$codehausVersion"
	compile "org.codehaus.jackson:jackson-jaxrs:$codehausVersion"
	compile "org.codehaus.jackson:jackson-xc:$codehausVersion"
	compile "org.eclipse.jetty:jetty-webapp:$jettyVersion"
	compile "org.eclipse.jetty:jetty-io:$jettyVersion"
	compile "org.apache.velocity:velocity:1.7"
	compile "org.apache.velocity:velocity-tools:2.0"
	compile "redis.clients:jedis:$jedisVersion"
	compile "com.amazonaws:elasticache-java-cluster-client:$memcachedVersion"
	compile "org.mongodb:mongo-java-driver:$mongoVersion"
	compile "org.jongo:jongo:1.0"
	compile "com.restfb:restfb:1.6.14"
	compile "joda-time:joda-time:2.4"
	compile "com.amazonaws:aws-java-sdk:$awsVersion"
	compile "org.apache.commons:commons-math3:$commonsMathVersion"
	compile "commons-cli:commons-cli:$commonsCliVersion"
	compile "commons-validator:commons-validator:$commonsValidator"
	compile "commons-collections:commons-collections:$commonsCollectionsVersion"
	compile "org.apache.commons:commons-io:$commonsIOVersion"
	compile "org.apache.commons:commons-lang3:$commonsLangVersion"
	compile "org.apache.poi:poi:$poiVersion"
	compile "org.apache.poi:poi-ooxml:$poiVersion"
	compile "org.quartz-scheduler:quartz:$quartzVersion"
	compile "com.googlecode.libphonenumber:libphonenumber:$libPhoneNumberVersion"
	compile "joda-time:joda-time:$jodaTimeVersion"
	compile "org.testng:testng:$testNgVersion"
	compile "org.mockito:mockito-all:$mockitoVersion"	
	compile "org.apache.httpcomponents:httpclient:4.4"	
	compile "org.apache.httpcomponents:httpmime:4.4"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:$jacksonVersion"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
	
	
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

test {
    systemProperties 'property': 'value'
}

jar{
manifest {
		attributes "Main-Class": "com.api.App"
		def manifestCp = configurations.compile.files.collect {
			File file = it
			"lib/${file.name}"
		}.join(' ')
		attributes 'Class-Path': manifestCp
		attributes 'Deployment-Scope': scope
		attributes 'Build-Tag': buildTag
		attributes 'Build-Number': buildNumber
		attributes 'Build-Id': buildId
	}
}
uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
task generateZip(type: Zip){
	doLast{
		println "Creating Zip..."
	}
	into ""
	from "$buildDir/output"
	destinationDir buildDir
}

task deploy << {
	println "Preparing Deployment Directory...."
	copy {
		from configurations.compile
		into "$buildDir/output/lib"
	}
	copy {
		into "$buildDir/output/"
		from "$buildDir/libs"
	}
	generateZip.execute();
}

